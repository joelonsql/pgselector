#!/usr/bin/perl
use strict;
use utf8;

use Socket;
use Carp;
use FileHandle;
use DBI;
use DBD::Pg;
use URI::Escape;
use Hash::MultiValue;
use JSON;
use Data::Dumper;
use File::Slurp qw(slurp);

use HTML;

# Code stolen from Plack::Request
sub decode_query_string {
    my $query_string = shift;
    my @query;
    if (defined $query_string) {
        if ($query_string =~ /=/) {
            # Handle  ?foo=bar&bar=foo type of query
            @query =
                map { s/\+/ /g; URI::Escape::uri_unescape($_) }
                map { /=/ ? split(/=/, $_, 2) : ($_ => '')}
                split(/[&;]/, $query_string);
        } else {
            # Handle ...?dog+bones type of query
            @query =
                map { (URI::Escape::uri_unescape($_), '') }
                split(/\+/, $query_string, -1);
        }
    }
    my $hash = Hash::MultiValue->new(@query);
    return$hash->mixed;
}

my $CSS = slurp('selector.css');

my @Connect = ("dbi:Pg:;port=5433", '', '', {pg_enable_utf8 => 1, sslmode => 'require', RaiseError => 1, PrintError => 0, AutoCommit => 1});

my $DBH = DBI->connect(@Connect);

my $Selector = $DBH->prepare('SELECT * FROM Selector(
    _FilterSchema := $1,
    _FilterTable  := $2,
    _FilterColumn := $3,
    _FilterValue  := $4,
    _Limit        := $5,
    _Offset       := $6
)');

my $Port = (@ARGV ? $ARGV[0] : 8432);
my $Proto = getprotobyname('tcp');
socket(S, PF_INET, SOCK_STREAM, $Proto) or die;
binmode(S,":utf8");
setsockopt(S, SOL_SOCKET, SO_REUSEADDR, pack("l", 1)) or die;
bind(S, sockaddr_in($Port, INADDR_ANY)) or die;
listen(S, SOMAXCONN) or die;
while (1)
{
    my $CPortCAddr = accept(C, S);
    my ($CPort,$CAddr) = sockaddr_in($CPortCAddr);
    C->autoflush(1);
    my $CName = gethostbyaddr($CAddr,AF_INET);
    printf(" <<<Request From '%s'>>>\n",$CName);
    my $Params;
    while (my $Line = <C>)
    {
        if ($Line =~ m!^GET / HTTP/\d.\d!) {
            $Params = {};
        } elsif ($Line =~ m!^GET /\?(.+) HTTP/\d.\d!) {
            $Params = decode_query_string($1);
        }
        print $Line;
        if ($Line =~ /^\r/) { last; }
    }
    if (!defined($Params)) {
        close(C);
        next;
    }
    my $HTML = HTML->New({Params => $Params});
    foreach my $Key (keys %{$Params}) {
        if (defined($Params->{$Key}) && $Params->{$Key} eq '') {
            $Params->{$Key} = undef;
        }
    }

    if (!defined($Params->{FilterValue})) {
        $Params->{FilterColumn} = undef;
    } elsif ($Params->{FilterValue} eq 'NULL') {
        $Params->{FilterValue} = undef;
    }
    if (!defined($Params->{FilterColumn})) {
        $Params->{FilterValue} = undef;
    }

    if (!defined($Params->{ShowUniqueNamesForIDs})) {
        $Params->{ShowUniqueNamesForIDs} = '1';
    }

    if (!defined($Params->{Limit})) {
        $Params->{Limit} = '100';
    }
    if (!defined($Params->{Offset})) {
        $Params->{Offset} = '0';
    }

    $Selector->execute(
        $Params->{FilterSchema},
        $Params->{FilterTable},
        $Params->{FilterColumn},
        $Params->{FilterValue},
        $Params->{Limit},
        $Params->{Offset}
    );
    my ($JSON) = $Selector->fetchrow_array();
    utf8::encode($JSON);
    my $Data = from_json($JSON);
    $Selector->finish();

    print C "HTTP/1.1 200\n\n";

    print C $HTML->HTML(
        $HTML->Head({CSS => $CSS}) .
        $HTML->Body(
            $HTML->Form(
                {ID => 'SelectorForm'}

            )
        )
    );

    # Filter menu
    print C $HTML->Menu([
        $HTML->Select({
            Name           => 'FilterSchema',
            Options        => $Data->{schemas},
            SelectedValue  => $Params->{FilterSchema},
            DefaultText    => 'Any schema',
            OnChangeSubmit => 1
        }),
        $HTML->Select({
            Name           => 'FilterTable',
            Options        => $Data->{tables},
            SelectedValue  => $Params->{FilterTable},
            DefaultText    => 'Any table',
            OnChangeSubmit => 1
        }),
        $HTML->Select({
            Name           => 'FilterColumn',
            Options        => $Data->{columns},
            SelectedValue  => $Params->{FilterColumn},
            DefaultText    => 'Any column',
            OnChangeSubmit => 0
        }),
        $HTML->Input({
            Name  => 'FilterValue',
            Value => $Params->{FilterValue}
        }),
        $HTML->Submit({Value => 'SELECT'}),
        $HTML->ResetButton({Name => 'FilterValue', Text => 'Any value'}),
        $HTML->ToggleButton({Name => 'ShowUniqueNamesForIDs', OnButton => 'Show ID numbers', OffButton => 'Show ID names'}),
        $HTML->Input({
            Name  => 'Limit',
            Value => $Params->{Limit} || 100
        }),
        $HTML->Input({
            Name      => 'Offset',
            Value     => $Params->{Offset} || 0,
            Increment => $Params->{Limit} || 100,
            Min       => 0
        }),
    ]);

    print C qq!<div class="menu">!;
    print C qq!<div class="cell">! . $HTML->Select({Name => 'FilterSchema', Options => $Data->{schemas}, SelectedValue => $Params->{FilterSchema}, DefaultText => 'Any schema', OnChangeSubmit => 1}) . qq!</div>!;
    print C qq!<div class="cell">! . $HTML->Select({Name => 'FilterTable',  Options => $Data->{tables},  SelectedValue => $Params->{FilterTable},  DefaultText => 'Any table',  OnChangeSubmit => 1}) . qq!</div>!;
    print C qq!<div class="cell">! . $HTML->Select({Name => 'FilterColumn', Options => $Data->{columns}, SelectedValue => $Params->{FilterColumn}, DefaultText => 'Any column', OnChangeSubmit => 0}) . qq!</div>!;
    print C qq!<div class="cell">! . $HTML->Input({Name => 'FilterValue', Value => $Params->{FilterValue}}) . qq!</div>!;
    print C qq!<div class="cell"><input type="submit" value="SELECT"/></div>!;
    print C qq!<div class="cell"><input type="button" onClick="document.getElementById('FilterValue').value = ''; document.getElementById('SelectorForm').submit();" value="Any value"/></div>!;
    print C qq!<div class="cell"><input type="hidden" name="ShowUniqueNamesForIDs" id="ShowUniqueNamesForIDs" value="$Params->{ShowUniqueNamesForIDs}" />!;
    if ($Params->{ShowUniqueNamesForIDs} eq '1') {
        print C qq!<div class="cell"><input type="button" onClick="document.getElementById('ShowUniqueNamesForIDs').value = '0'; document.getElementById('SelectorForm').submit();" value="Show ID numbers"/></div>!;
    } elsif ($Params->{ShowUniqueNamesForIDs} eq '0') {
        print C qq!<div class="cell"><input type="button" onClick="document.getElementById('ShowUniqueNamesForIDs').value = '1'; document.getElementById('SelectorForm').submit();" value="Show ID names"/></div>!;
    }
    print C qq!<div class="cell">! . $HTML->Input({Name => 'Limit', Value => $Params->{Limit}})  . qq!</div>!;
    my $PrevOffset;
    my $NextOffset;
    if (defined($Params->{Offset}) && defined($Params->{Limit})) {
        $PrevOffset = ($Params->{Offset} - $Params->{Limit});
        $NextOffset = ($Params->{Offset} + $Params->{Limit});
    }
    if ($PrevOffset >= 0) {
        print C qq!<div class="cell"><input type="button" onClick="document.getElementById('Offset').value = '$PrevOffset'; document.getElementById('SelectorForm').submit();" value="$PrevOffset"/></div>!;
    }
    print C qq!<div class="cell">! . $HTML->Input({Name => 'Offset', Value => $Params->{Offset}}) . qq!</div>!;
    if (defined($NextOffset)) {
        print C qq!<div class="cell"><input type="button" onClick="document.getElementById('Offset').value = '$NextOffset'; document.getElementById('SelectorForm').submit();" value="$NextOffset"/></div>!;
    }
    print C qq!</div>!;
    print C qq!</div>!;

    # Output tables
    my $ID = 0;
    foreach my $Table (sort keys %{$Data->{result}}) {
        if (!defined($Params->{FilterTable})) {
            print C qq!<label class="collapse label" for="$Table">$Table</label>!;
            print C qq!<input id="$Table" type="checkbox"/>!;
        }
        print C qq!<div class="table">!;
        my $Columns = $Data->{result}->{$Table}->{columns};
        print C qq!<div class="row header blue">!;
        foreach my $Column (@{$Columns}) {
            print C qq!<div class="cell">$Column</div>!;
        }
        print C qq!</div>!;
        foreach my $Row (@{$Data->{result}->{$Table}->{rows}}) {
            my $Values   = $Row->{values};
            my $Parents  = $Row->{parents};
            my $Children = $Row->{children};
            print C qq!<div class="row">!;
            foreach my $Column (@{$Columns}) {
                if (defined($Values->{$Column})) {
                    my $CellClasses = '';
                    if (defined $Params->{FilterColumn}
                    && defined $Params->{FilterValue}
                    && $Column eq $Params->{FilterColumn}
                    && $Values->{$Column} eq $Params->{FilterValue}
                    ) {
                        $CellClasses = ' blink_me';
                    }
                    if (defined($Parents)
                    &&  defined($Parents->{$Column})
                    &&  scalar @{$Parents->{$Column}} == 1
                    && (!defined($Children) || !defined($Children->{$Column}))
                    ) {
                        my $Parent = $Parents->{$Column}->[0];
                        print C qq!<div class="cell$CellClasses">&uarr;! . $HTML->NodeLink({Node => $Parent, Type => 'VALUE', ShowUniqueNamesForIDs => $Params->{ShowUniqueNamesForIDs}}) . qq!</div>!;
                    } elsif (defined($Children)
                    &&       defined($Children->{$Column})
                    &&       scalar @{$Children->{$Column}} == 1
                    &&      (!defined($Parents) || !defined($Parents->{$Column}))
                    ) {
                        my $Child = $Children->{$Column}->[0];
                        print C qq!<div class="cell$CellClasses">&darr;! . $HTML->NodeLink({Node => $Child, Type => 'VALUE', ShowUniqueNamesForIDs => $Params->{ShowUniqueNamesForIDs}}) . qq!</div>!;
                    } elsif ( (!defined($Parents)  || !defined($Parents->{$Column}))
                           && (!defined($Children) || !defined($Children->{$Column}))
                    ) {
                        $ID++;
                        print C $HTML->Cell({Value => $Values->{$Column}});
                    } else {
                        $ID++;
                        my $Arrows = '';
                        my $Links = '';
                        if (defined($Parents) && defined($Parents->{$Column})) {
                            foreach my $Parent (@{$Parents->{$Column}}) {
                                $Arrows .= '&uarr;';
                                $Links .= '&uarr;' . $HTML->NodeLink({Node => $Parent, Type => 'TABLE', ShowUniqueNamesForIDs => $Params->{ShowUniqueNamesForIDs}}) . '<br/>';
                            }
                        }
                        my $DownArrows = '';
                        my $ChildrenLinks = '';
                        if (defined($Children) && defined($Children->{$Column})) {
                            foreach my $Child (@{$Children->{$Column}}) {
                                $Arrows .= '&darr;';
                                $Links .= '&darr;' . $HTML->NodeLink({Node => $Child, Type => 'TABLE', ShowUniqueNamesForIDs => $Params->{ShowUniqueNamesForIDs}}) . '<br/>';
                            }
                        }
                        print C qq!<div class="cell">!;
                        print C qq!<label class="collapse link$CellClasses" for="cell-$ID">$Arrows$Values->{$Column}</label>!;
                        print C qq!<input id="cell-$ID" type="checkbox" checked/>!;
                        print C qq!<div>!;
                        print C $Links;
                        print C qq!</div>!;
                        print C qq!</div>!;
                    }
                } else {
                    print C qq!<div class="cell null">NULL</div>!;
                }
            }
            print C qq!</div>!;
        }
        print C qq!</div>!;
    }
    print C qq!</form>!;
    print C qq!</body>!;
    print C qq!</html>!;

    close(C);
}

1;
