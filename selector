#!/usr/bin/perl
use strict;
use utf8;

use Socket;
use Carp;
use FileHandle;
use DBI;
use DBD::Pg;
use URI::Escape;
use Hash::MultiValue;
use JSON;
use Data::Dumper;
use File::Slurp qw(slurp);

use HTML;

# Code stolen from Plack::Request
sub decode_query_string {
    my $query_string = shift;
    my @query;
    if (defined $query_string) {
        if ($query_string =~ /=/) {
            # Handle  ?foo=bar&bar=foo type of query
            @query =
                map { s/\+/ /g; URI::Escape::uri_unescape($_) }
                map { /=/ ? split(/=/, $_, 2) : ($_ => '')}
                split(/[&;]/, $query_string);
        } else {
            # Handle ...?dog+bones type of query
            @query =
                map { (URI::Escape::uri_unescape($_), '') }
                split(/\+/, $query_string, -1);
        }
    }
    my $hash = Hash::MultiValue->new(@query);
    return$hash->mixed;
}

my $CSS = slurp('selector.css');

my @Connect = ("dbi:Pg:;port=5433", '', '', {pg_enable_utf8 => 1, sslmode => 'require', RaiseError => 1, PrintError => 0, AutoCommit => 1});

my $DBH = DBI->connect(@Connect);

my $Selector = $DBH->prepare('SELECT * FROM Selector(
    _FilterSchema := $1,
    _FilterTable  := $2,
    _FilterColumn := $3,
    _FilterValue  := $4,
    _Limit        := $5,
    _Offset       := $6
)');

my $Port = (@ARGV ? $ARGV[0] : 8432);
my $Proto = getprotobyname('tcp');
socket(S, PF_INET, SOCK_STREAM, $Proto) or die;
binmode(S,":utf8");
setsockopt(S, SOL_SOCKET, SO_REUSEADDR, pack("l", 1)) or die;
bind(S, sockaddr_in($Port, INADDR_ANY)) or die;
listen(S, SOMAXCONN) or die;
while (1)
{
    my $CPortCAddr = accept(C, S);
    my ($CPort,$CAddr) = sockaddr_in($CPortCAddr);
    C->autoflush(1);
    my $CName = gethostbyaddr($CAddr,AF_INET);
    printf(" <<<Request From '%s'>>>\n",$CName);
    my $Params;
    while (my $Line = <C>)
    {
        if ($Line =~ m!^GET / HTTP/\d.\d!) {
            $Params = {};
        } elsif ($Line =~ m!^GET /\?(.+) HTTP/\d.\d!) {
            $Params = decode_query_string($1);
        }
        print $Line;
        if ($Line =~ /^\r/) { last; }
    }
    if (!defined($Params)) {
        close(C);
        next;
    }
    my $H = HTML->New({
        Params => $Params,
        FormID => 'SelectorForm'
    });
    foreach my $Key (keys %{$Params}) {
        if (defined($Params->{$Key}) && $Params->{$Key} eq '') {
            $Params->{$Key} = undef;
        }
    }

    if (!defined($Params->{FilterValue})) {
        $Params->{FilterColumn} = undef;
    } elsif ($Params->{FilterValue} eq 'NULL') {
        $Params->{FilterValue} = undef;
    }
    if (!defined($Params->{FilterColumn})) {
        $Params->{FilterValue} = undef;
    }

    if (!defined($Params->{ShowUniqueNamesForIDs})) {
        $Params->{ShowUniqueNamesForIDs} = '1';
    }

    if (!defined($Params->{Limit})) {
        $Params->{Limit} = '100';
    }
    if (!defined($Params->{Offset})) {
        $Params->{Offset} = '0';
    }

    $Selector->execute(
        $Params->{FilterSchema},
        $Params->{FilterTable},
        $Params->{FilterColumn},
        $Params->{FilterValue},
        $Params->{Limit},
        $Params->{Offset}
    );
    my ($JSON) = $Selector->fetchrow_array();
    utf8::encode($JSON);
    my $Data = from_json($JSON);
    $Selector->finish();

    print C "HTTP/1.1 200\n\n";

    my $TableHTML = '';
    foreach my $Table (sort keys %{$Data->{result}}) {
        my $Columns = $Data->{result}->{$Table}->{columns};
        my $RowsHTML = [];
        push @$RowsHTML, $H->Cells($Columns);
        print Dumper $RowsHTML;
        foreach my $Row (@{$Data->{result}->{$Table}->{rows}}) {
            my $Values   = $Row->{values};
            my $RowHTML = '';
            my $ColumnsHTML = [];
            foreach my $Column (@{$Columns}) {
                my $Value = $Values->{$Column};
                my $Parents  = (defined($Row->{parents})  && defined($Row->{parents}->{$Column}))  ? $Row->{parents}->{$Column}  : []; 
                my $Children = (defined($Row->{children}) && defined($Row->{children}->{$Column})) ? $Row->{children}->{$Column} : []; 
                my $ColumnHTML;
                my @Relatives = ();
                my $CountRelatives = @$Parents + @$Children;
                if ($CountRelatives == 0) {
                    $ColumnHTML = $H->TextCell({Column => $Column, Value => $Value});
                } elsif(@$Parents == 1) {
                    $ColumnHTML = $H->Cell({
                        Column => $Column,
                        Value  => $H->NodeLink({Parent => $Parents->[0], Type => 'VALUE'})
                    });
                } elsif(@$Children == 1) {
                    $ColumnHTML = $H->Cell({
                        Column => $Column,
                        Value  => $H->NodeLink({Child => $Children->[0], Type => 'VALUE'})
                    });
                } elsif($CountRelatives > 1) {
                    my @Relatives;
                    foreach my $Parent (@$Parents) {
                        push @Relatives, $H->NodeLink({Parent => $Parent, Type => 'TABLE'});
                    }
                    foreach my $Child (@$Children) {
                        push @Relatives, $H->NodeLink({Child => $Child, Type => 'TABLE'});
                    }
                    $ColumnHTML = $H->Cell({
                        Column => $Column,
                        Value  => $H->Collapse({
                            Label     => '&uarr;' x @$Parents . '&darr;' x @$Children . $Value,
                            InnerHTML => join('<br/>', @Relatives)
                        })
                    });
                }
                push @$ColumnsHTML, $ColumnHTML;
            }
            push @$RowsHTML, $ColumnsHTML;
        }
        $TableHTML .= $H->Table($RowsHTML);
    }

    print C $H->HTML(
        $H->Head({CSS => $CSS})
        . $H->Body(
            $H->Form(
                $H->Menu([
                    $H->Select({
                        Name           => 'FilterSchema',
                        Options        => $Data->{schemas},
                        SelectedValue  => $Params->{FilterSchema},
                        DefaultText    => 'Any schema',
                        OnChangeSubmit => 1
                    }),
                    $H->Select({
                        Name           => 'FilterTable',
                        Options        => $Data->{tables},
                        SelectedValue  => $Params->{FilterTable},
                        DefaultText    => 'Any table',
                        OnChangeSubmit => 1
                    }),
                    $H->Select({
                        Name           => 'FilterColumn',
                        Options        => $Data->{columns},
                        SelectedValue  => $Params->{FilterColumn},
                        DefaultText    => 'Any column',
                        OnChangeSubmit => 0
                    }),
                    $H->Input({
                        Name  => 'FilterValue',
                        Value => $Params->{FilterValue}
                    }),
                    $H->Submit({Value => 'SELECT'}),
                    $H->ResetButton({Name => 'FilterValue', Text => 'Any value'}),
                    $H->ToggleButton({Name => 'ShowUniqueNamesForIDs', OnButton => 'Raw IDs', OffButton => 'Translate IDs'}),
                    $H->Input({
                        Name  => 'Limit',
                        Value => $Params->{Limit} || 100
                    }),
                    $H->Input({
                        Name      => 'Offset',
                        Value     => $Params->{Offset} || 0,
                        Increment => $Params->{Limit} || 100,
                        Min       => 0
                    }),
                ])
                . $TableHTML
            )
        )
    );

    close(C);
}

1;
